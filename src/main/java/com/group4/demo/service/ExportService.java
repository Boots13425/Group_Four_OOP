package com.group4.demo.service;

import com.group4.demo.model.Grade;
import com.group4.demo.model.Student;
import com.group4.demo.repository.GradeRepository;
import com.group4.demo.repository.StudentRepository;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.opencsv.CSVWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.StringWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Export Service - Handles grade export functionality
 * This implements the Export Grades Scenario from your sequence diagram
 */
@Service
public class ExportService {
    
    @Autowired
    private StudentRepository studentRepository;
    
    @Autowired
    private GradeRepository gradeRepository;
    
    /**
     * EXPORT GRADES SCENARIO - PDF FORMAT
     * This implements the complete PDF export flow:
     * 1. Retrieve student grades
     * 2. Format data for PDF
     * 3. Generate PDF document
     * 4. Return file for download
     */
    public ExportResponse exportGradesToPDF(Long studentId) {
        try {
            // Step 1: Find student
            Student student = studentRepository.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));
            
            // Step 2: Get all grades for student
            List<Grade> grades = gradeRepository.findByStudentId(studentId);
            
            if (grades.isEmpty()) {
                return new ExportResponse(false, null, "No grades found for export");
            }
            
            // Step 3: Create PDF document
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(outputStream);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);
            
            // Step 4: Add header information
            document.add(new Paragraph("UNIVERSITY GRADE TRANSCRIPT")
                .setFontSize(18)
                .setBold());
            
            document.add(new Paragraph("Student Name: " + student.getName()));
            document.add(new Paragraph("Student ID: " + student.getStudentID()));
            document.add(new Paragraph("Current GPA: " + String.format("%.2f", student.getCurrentGPA())));
            document.add(new Paragraph("Total Credits: " + student.getTotalCredits()));
            document.add(new Paragraph("Generated: " + 
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))));
            document.add(new Paragraph("\n"));
            
            // Step 5: Create grades table
            Table table = new Table(6);
            table.addHeaderCell(new Cell().add(new Paragraph("Course Code")));
            table.addHeaderCell(new Cell().add(new Paragraph("Course Title")));
            table.addHeaderCell(new Cell().add(new Paragraph("Credits")));
            table.addHeaderCell(new Cell().add(new Paragraph("Score")));
            table.addHeaderCell(new Cell().add(new Paragraph("Letter Grade")));
            table.addHeaderCell(new Cell().add(new Paragraph("Grade Points")));
            
            // Step 6: Add grade data to table
            for (Grade grade : grades) {
                table.addCell(new Cell().add(new Paragraph(grade.getCourse().getCourseID())));
                table.addCell(new Cell().add(new Paragraph(grade.getCourse().getCourseName())));
                table.addCell(new Cell().add(new Paragraph(String.valueOf(grade.getCourse().getCredits()))));
                table.addCell(new Cell().add(new Paragraph(String.format("%.1f", grade.getValue()))));
                table.addCell(new Cell().add(new Paragraph(grade.getLetterGrade())));
                table.addCell(new Cell().add(new Paragraph(String.format("%.1f", grade.getGradePoints()))));
            }
            
            document.add(table);
            
            // Step 7: Add footer
            document.add(new Paragraph("\n"));
            document.add(new Paragraph("This is an official transcript generated by the University Grade Management System."));
            
            // Step 8: Close document
            document.close();
            
            return new ExportResponse(true, outputStream.toByteArray(), 
                "PDF transcript generated successfully");
            
        } catch (Exception e) {
            return new ExportResponse(false, null, "Error generating PDF: " + e.getMessage());
        }
    }
    
    /**
     * EXPORT GRADES SCENARIO - CSV FORMAT
     * This implements the CSV export flow
     */
    public ExportResponse exportGradesToCSV(Long studentId) {
        try {
            // Step 1: Find student
            Student student = studentRepository.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));
            
            // Step 2: Get all grades for student
            List<Grade> grades = gradeRepository.findByStudentId(studentId);
            
            if (grades.isEmpty()) {
                return new ExportResponse(false, null, "No grades found for export");
            }
            
            // Step 3: Create CSV content
            StringWriter stringWriter = new StringWriter();
            CSVWriter csvWriter = new CSVWriter(stringWriter);
            
            // Step 4: Add header information
            csvWriter.writeNext(new String[]{"Student Information"});
            csvWriter.writeNext(new String[]{"Name", student.getName()});
            csvWriter.writeNext(new String[]{"Student ID", student.getStudentID()});
            csvWriter.writeNext(new String[]{"Current GPA", String.format("%.2f", student.getCurrentGPA())});
            csvWriter.writeNext(new String[]{"Total Credits", student.getTotalCredits().toString()});
            csvWriter.writeNext(new String[]{"Generated", 
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))});
            csvWriter.writeNext(new String[]{}); // Empty line
            
            // Step 5: Add column headers
            csvWriter.writeNext(new String[]{
                "Course Code", "Course Title", "Credits", "Score", 
                "Letter Grade", "Grade Points", "Term", "Evaluation"
            });
            
            // Step 6: Add grade data
            for (Grade grade : grades) {
                csvWriter.writeNext(new String[]{
                    grade.getCourse().getCourseName(),
                    grade.getCourse().getCourseName(),
                     String.valueOf(grade.getCourse().getCredits()),
                    String.format("%.1f", grade.getValue()),
                    grade.getLetterGrade(),
                    String.format("%.1f", grade.getGradePoints()),
                    grade.getTerm(),
                    grade.getEvaluation()
                });
            }
            
            csvWriter.close();
            
            return new ExportResponse(true, stringWriter.toString().getBytes(), 
                "CSV transcript generated successfully");
            
        } catch (Exception e) {
            return new ExportResponse(false, null, "Error generating CSV: " + e.getMessage());
        }
    }
    
    /**
     * Export grades for a specific term
     */
    public ExportResponse exportGradesByTerm(Long studentId, String term, String format) {
        try {
            Student student = studentRepository.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));
            
            List<Grade> grades = gradeRepository.findByStudentIdAndTerm(studentId, term);
            
            if (grades.isEmpty()) {
                return new ExportResponse(false, null, "No grades found for term: " + term);
            }
            
            if ("PDF".equalsIgnoreCase(format)) {
                return exportTermGradesToPDF(student, grades, term);
            } else if ("CSV".equalsIgnoreCase(format)) {
                return exportTermGradesToCSV(student, grades, term);
            } else {
                return new ExportResponse(false, null, "Unsupported format: " + format);
            }
            
        } catch (Exception e) {
            return new ExportResponse(false, null, "Error exporting grades: " + e.getMessage());
        }
    }
    
    /**
     * Helper method for term-specific PDF export
     */
    private ExportResponse exportTermGradesToPDF(Student student, List<Grade> grades, String term) {
        // Similar to exportGradesToPDF but filtered by term
        // Implementation would be similar to above but with term-specific data
        return new ExportResponse(true, new byte[0], "Term PDF export not fully implemented");
    }
    
    /**
     * Helper method for term-specific CSV export
     */
    private ExportResponse exportTermGradesToCSV(Student student, List<Grade> grades, String term) {
        // Similar to exportGradesToCSV but filtered by term
        // Implementation would be similar to above but with term-specific data
        return new ExportResponse(true, new byte[0], "Term CSV export not fully implemented");
    }
    
    /**
     * Response class for export operations
     */
    public static class ExportResponse {
        private boolean success;
        private byte[] fileData;
        private String message;
        
        public ExportResponse(boolean success, byte[] fileData, String message) {
            this.success = success;
            this.fileData = fileData;
            this.message = message;
        }
        
        public boolean isSuccess() { return success; }
        public byte[] getFileData() { return fileData; }
        public String getMessage() { return message; }
    }
}
